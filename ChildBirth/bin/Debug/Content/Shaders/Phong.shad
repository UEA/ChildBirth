<shaderpair >
  <vertex>
    <![CDATA[
#version 120

uniform mat4 projection_matrix;
uniform mat4 modelview_matrix;
uniform mat4 model_matrix;
uniform mat4 rotation_matrix;
uniform mat4 mesh_matrix;
uniform mat4 shadow_bias;
uniform mat4 light_view;
uniform mat4 light_proj;

uniform vec3 in_light;
uniform vec3 in_eyepos;

attribute vec3 in_normal;
attribute vec3 in_position;
attribute vec2 in_texture;
attribute vec3 in_tangent;

varying vec4 g_pos;
varying vec3 v_eyedirection;
varying vec3 v_normal;
varying vec2 v_texture;
varying vec3 v_tangent;
varying vec3 v_bnormal;
varying vec3 light;
varying float v_depth;


void main(void)
{
	g_pos = model_matrix * mesh_matrix * vec4(in_position, 1);
	
	gl_Position = projection_matrix * modelview_matrix * g_pos;
	
	v_texture = in_texture;
	
	v_eyedirection = -normalize(g_pos.xyz - in_eyepos);
	
	light = normalize(in_light - g_pos.xyz);
	
	v_normal =  (rotation_matrix * vec4(in_normal, 1.0)).xyz;
}
    ]]>
  </vertex>
  <fragment>
    <![CDATA[
#version 120

uniform sampler2D baseTexture;
uniform sampler2D base2Texture;
uniform sampler2D normalTexture;
uniform sampler2D envMapTexture;

varying vec4 g_pos;
varying vec3 v_eyedirection;
varying vec3 v_normal;
varying vec2 v_texture;
varying vec3 v_tangent;
varying vec3 v_bnormal;
varying vec3 light;
varying float v_depth;

void main (void)
{
	vec3 reflection = normalize(reflect(-v_eyedirection, v_normal));
	
	float diffuse = clamp(dot(normalize(v_normal), light), 0.0, 1.0);
	float specular = pow(clamp(dot(reflection, light), 0.0, 1.0), 40);
	
	vec3 texture = texture2D(baseTexture, v_texture).xyz * diffuse + vec3(1.0) * specular + ambient_light;
	
	gl_FragColor = vec4 (texture, 1.0);
}
]]>
  </fragment>
  
</shaderpair>