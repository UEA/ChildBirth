<shaderpair >
  <vertex>
    <![CDATA[
    #version 120

uniform mat4 projection_matrix;
uniform mat4 modelview_matrix;
uniform mat4 model_matrix;
uniform mat4 rotation_matrix;
uniform mat4 mesh_matrix;
uniform mat4 shadow_bias;
uniform mat4 light_view;
uniform mat4 light_proj;

uniform vec3 in_light;
uniform vec3 in_eyepos;

attribute vec3 in_normal;
attribute vec3 in_position;
attribute vec2 in_texture;
attribute vec3 in_tangent;

varying vec4 g_pos;
varying vec3 v_eyedirection;
varying vec3 v_normal;
varying vec2 v_texture;
//varying vec3 v_tangent;
//varying vec3 v_bnormal;
varying vec3 light;
varying vec4 ShadowCoord;
varying vec3 toLight;

void main(void)
{
	g_pos = model_matrix * mesh_matrix * vec4(in_position, 1);
	
	ShadowCoord =  shadow_bias * g_pos;
	
	gl_Position = projection_matrix * modelview_matrix * g_pos;
	
	v_texture = in_texture;
	
	v_eyedirection = -normalize(g_pos.xyz - in_eyepos);
	toLight = g_pos.xyz - in_light;
	light = - normalize(toLight);
	
	v_normal = normalize((vec4(in_normal, 0)).xyz);
	//v_tangent = normalize((vec4(in_tangent, 0)).xyz);
	//v_bnormal = normalize(cross(v_normal, v_tangent));
}
    ]]>
  </vertex>

  <fragment>
    <![CDATA[
    #version 120

    uniform sampler2D baseTexture;
    uniform sampler2D normalTexture;
    uniform sampler2D envMapTexture;
    uniform sampler2D lightTexture;
    uniform float in_far;

    varying vec4 g_pos;
    varying vec3 v_eyedirection;
    varying vec3 v_normal;
    varying vec2 v_texture;
    varying vec3 v_tangent;
    varying vec3 v_bnormal;
    varying vec3 light;
    varying vec3 toLight;
    varying float v_depth;
    varying vec4 ShadowCoord;

    const vec3 Xunitvec = vec3 (1.0, 0.0, 0.0);
    const vec3 Yunitvec = vec3 (0.0, 1.0, 0.0);

    void main (void)
    {
    float eyeNormalDot = dot(normalize(v_normal), normalize(v_eyedirection));
    if(eyeNormalDot < 0.0)
		discard;
	
////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////// REFLECTION
////////////////////////////////////////////////////////////////////////////////////////////////////////////

	vec3 reflection = normalize(reflect(v_eyedirection, v_normal));
	
	vec2 index;
	index.y = reflection.y;
	
	reflection.y = 0.0;
	index.x = normalize(reflection).x * 0.5;
	
	if (reflection.z >= 0.0)
		index = (index + 1.0) * 0.5;
	else
	{
		index.y = (index.y + 1.0) * 0.5;
		index.x = (-index.x) * 0.5 + 1.0;
	}

	vec3 envColor = vec3 (texture2D(envMapTexture, index));

////////////////////////////////////////////////////////////////////////////////////////////////////////////


////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////// COLOR
////////////////////////////////////////////////////////////////////////////////////////////////////////////
	
	float diffuse = clamp(dot(normalize(v_normal), light), 0.0, 1.0);
	float specular = pow(clamp(dot(-reflection, light), 0.0, 1.0), 40);
	
	vec3 texture = vec3(0.2, 0.2, 0.2) + diffuse + vec3(1.0) * specular;


////////////////////////////////////////////////////////////////////////////////////////////////////////////



////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////// SHADOW
////////////////////////////////////////////////////////////////////////////////////////////////////

	vec4 shadowCoordinateWdivide = ShadowCoord / ShadowCoord.w ;
	
	// Used to lower moirÃ© pattern and self-shadowing
	shadowCoordinateWdivide.z += 0.0000005;
	
	float shadowMapValue = length(texture2D(lightTexture, shadowCoordinateWdivide.st).y); // full value from 0 to inf

 	float shadow = 0.0;
 	if (ShadowCoord.w > 0.0)
 		shadow = shadowMapValue < shadowCoordinateWdivide.z ? 0.6 : 1.0 ;

////////////////////////////////////////////////////////////////////////////////////////////////////

	gl_FragColor = vec4 (mix(envColor, texture, 0.85) * shadow, 1.0);
}
]]>
  </fragment>
  
</shaderpair>